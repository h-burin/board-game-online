/**
 * ITO Game Firebase Functions
 * ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ game logic ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡∏° ITO (BWLxJkh45e6RiALRBmcl)
 */

import {
  collection,
  doc,
  getDoc,
  getDocs,
  setDoc,
  updateDoc,
  deleteDoc,
  query,
  where,
  orderBy,
  serverTimestamp,
  Timestamp,
} from 'firebase/firestore';
import { db } from './config';
import type { ItoGameState, ItoPlayerAnswer, ItoQuestion } from '@/types/ito';

/**
 * ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏à‡∏ó‡∏¢‡πå‡∏à‡∏≤‡∏Å ito_questions
 */
export async function getRandomQuestion(): Promise<ItoQuestion | null> {
  try {
    const questionsRef = collection(db, 'ito_questions');
    const snapshot = await getDocs(questionsRef);

    if (snapshot.empty) {
      console.error('‚ùå No questions found in ito_questions collection');
      return null;
    }

    // Random ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å 1 ‡πÇ‡∏à‡∏ó‡∏¢‡πå
    const questions = snapshot.docs.map((doc) => ({
      id: doc.id,
      questionsTH: doc.data().questionsTH || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏à‡∏ó‡∏¢‡πå',
    }));

    const randomIndex = Math.floor(Math.random() * questions.length);
    return questions[randomIndex];
  } catch (error) {
    console.error('Error getting random question:', error);
    return null;
  }
}

/**
 * ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô (1-100) ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ñ‡∏ô‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
 */
export function generateUniqueNumbers(playerCount: number): number[] {
  const numbers = new Set<number>();

  while (numbers.size < playerCount) {
    const randomNum = Math.floor(Math.random() * 100) + 1; // 1-100
    numbers.add(randomNum);
  }

  return Array.from(numbers);
}

/**
 * ‡∏™‡∏£‡πâ‡∏≤‡∏á Game State ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ITO
 */
export async function initializeItoGame(
  sessionId: string,
  roomId: string,
  playerIds: string[],
  playerNames: { [playerId: string]: string }
): Promise<{ gameState: ItoGameState; playerAnswers: ItoPlayerAnswer[] } | null> {
  try {
    // 1. ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÇ‡∏à‡∏ó‡∏¢‡πå
    const question = await getRandomQuestion();
    if (!question) {
      throw new Error('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏∏‡πà‡∏°‡πÇ‡∏à‡∏ó‡∏¢‡πå‡πÑ‡∏î‡πâ');
    }

    // 2. ‡∏™‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏Ç‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
    const numbers = generateUniqueNumbers(playerIds.length);

    // 3. ‡∏™‡∏£‡πâ‡∏≤‡∏á Game State
    const phaseEndTime = new Date(Date.now() + 60 * 1000); // 1 ‡∏ô‡∏≤‡∏ó‡∏µ

    const gameState: ItoGameState = {
      id: sessionId,
      roomId: roomId,
      gameId: 'BWLxJkh45e6RiALRBmcl',
      hearts: 3,
      currentRound: 1,
      totalRounds: playerIds.length,
      questionId: question.id,
      questionText: question.questionsTH,
      phase: 'writing',
      phaseEndTime: phaseEndTime,
      revealedNumbers: [],
      status: 'playing',
      startedAt: new Date(),
      updatedAt: new Date(),
    };

    // 4. ‡∏™‡∏£‡πâ‡∏≤‡∏á Player Answers
    const playerAnswers: ItoPlayerAnswer[] = playerIds.map((playerId, index) => ({
      playerId: playerId,
      playerName: playerNames[playerId] || 'Unknown',
      number: numbers[index],
      answer: '',
      isRevealed: false,
    }));

    // 5. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Firestore
    const sessionRef = doc(db, 'game_sessions', sessionId);
    await updateDoc(sessionRef, {
      ...gameState,
      startedAt: serverTimestamp(),
      updatedAt: serverTimestamp(),
      phaseEndTime: Timestamp.fromDate(phaseEndTime),
    });

    // 6. ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Player Answers ‡∏•‡∏á subcollection
    const playerAnswersRef = collection(db, `game_sessions/${sessionId}/player_answers`);
    for (const playerAnswer of playerAnswers) {
      await setDoc(doc(playerAnswersRef, playerAnswer.playerId), {
        ...playerAnswer,
        submittedAt: null,
      });
    }

    console.log('‚úÖ ITO Game initialized:', { sessionId, question: question.questionsTH });

    return { gameState, playerAnswers };
  } catch (error) {
    console.error('‚ùå Error initializing ITO game:', error);
    return null;
  }
}

/**
 * ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
 */
export async function submitPlayerAnswer(
  sessionId: string,
  playerId: string,
  answer: string
): Promise<boolean> {
  try {
    const answerRef = doc(db, `game_sessions/${sessionId}/player_answers`, playerId);
    await updateDoc(answerRef, {
      answer: answer,
      submittedAt: serverTimestamp(),
    });

    console.log('‚úÖ Player answer submitted:', { sessionId, playerId, answer });
    return true;
  } catch (error) {
    console.error('‚ùå Error submitting answer:', error);
    return false;
  }
}

/**
 * ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á
 */
export async function checkAllAnswersSubmitted(sessionId: string): Promise<boolean> {
  try {
    const answersRef = collection(db, `game_sessions/${sessionId}/player_answers`);
    const snapshot = await getDocs(answersRef);

    const allSubmitted = snapshot.docs.every((doc) => {
      const data = doc.data();
      return data.submittedAt !== null && data.answer.trim() !== '';
    });

    return allSubmitted;
  } catch (error) {
    console.error('‚ùå Error checking answers:', error);
    return false;
  }
}

/**
 * ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô Phase ‡πÄ‡∏õ‡πá‡∏ô Voting
 */
export async function startVotingPhase(sessionId: string): Promise<boolean> {
  try {
    const sessionRef = doc(db, 'game_sessions', sessionId);
    const phaseEndTime = new Date(Date.now() + 4 * 60 * 1000); // 4 ‡∏ô‡∏≤‡∏ó‡∏µ

    await updateDoc(sessionRef, {
      phase: 'voting',
      phaseEndTime: Timestamp.fromDate(phaseEndTime),
      updatedAt: serverTimestamp(),
    });

    console.log('‚úÖ Voting phase started:', sessionId);
    return true;
  } catch (error) {
    console.error('‚ùå Error starting voting phase:', error);
    return false;
  }
}

/**
 * ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏ß‡∏ï‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÄ‡∏•‡πà‡∏ô
 */
export async function submitVote(
  sessionId: string,
  playerId: string,
  votedForPlayerId: string
): Promise<boolean> {
  try {
    const voteRef = doc(db, `game_sessions/${sessionId}/votes`, playerId);
    await setDoc(voteRef, {
      playerId: playerId,
      votedForPlayerId: votedForPlayerId,
      votedAt: serverTimestamp(),
    });

    console.log('‚úÖ Vote submitted:', { sessionId, playerId, votedFor: votedForPlayerId });
    return true;
  } catch (error) {
    console.error('‚ùå Error submitting vote:', error);
    return false;
  }
}

/**
 * ‡∏ô‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï‡πÅ‡∏•‡∏∞‡∏´‡∏≤‡∏ú‡∏π‡πâ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÇ‡∏´‡∏ß‡∏ï‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
 */
export async function countVotes(sessionId: string): Promise<string | null> {
  try {
    const votesRef = collection(db, `game_sessions/${sessionId}/votes`);
    const snapshot = await getDocs(votesRef);

    if (snapshot.empty) {
      return null;
    }

    // ‡∏ô‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
    const voteCount: { [playerId: string]: number } = {};
    snapshot.docs.forEach((doc) => {
      const votedFor = doc.data().votedForPlayerId;
      voteCount[votedFor] = (voteCount[votedFor] || 0) + 1;
    });

    // ‡∏´‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î
    let maxVotes = 0;
    const winners: string[] = [];

    Object.entries(voteCount).forEach(([playerId, count]) => {
      if (count > maxVotes) {
        maxVotes = count;
        winners.length = 0;
        winners.push(playerId);
      } else if (count === maxVotes) {
        winners.push(playerId);
      }
    });

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏™‡∏°‡∏≠ random
    if (winners.length > 1) {
      const randomIndex = Math.floor(Math.random() * winners.length);
      return winners[randomIndex];
    }

    return winners[0] || null;
  } catch (error) {
    console.error('‚ùå Error counting votes:', error);
    return null;
  }
}

/**
 * ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
 */
export async function revealAndCheck(
  sessionId: string,
  selectedPlayerId: string
): Promise<{
  success: boolean;
  number: number;
  isCorrect: boolean;
  heartsLost: number;
  newHearts: number;
} | null> {
  try {
    // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• game state ‡πÅ‡∏•‡∏∞ player answers
    const sessionRef = doc(db, 'game_sessions', sessionId);
    const sessionSnap = await getDoc(sessionRef);

    if (!sessionSnap.exists()) {
      throw new Error('Game session not found');
    }

    const gameState = sessionSnap.data() as ItoGameState;

    // 2. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• player answer ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    const answerRef = doc(db, `game_sessions/${sessionId}/player_answers`, selectedPlayerId);
    const answerSnap = await getDoc(answerRef);

    if (!answerSnap.exists()) {
      throw new Error('Player answer not found');
    }

    const selectedAnswer = answerSnap.data() as ItoPlayerAnswer;
    const selectedNumber = selectedAnswer.number;

    // 3. ‡∏î‡∏∂‡∏á‡πÄ‡∏•‡∏Ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î (‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï)
    const answersRef = collection(db, `game_sessions/${sessionId}/player_answers`);
    const answersSnap = await getDocs(answersRef);

    const unrevealedNumbers: number[] = [];
    const allPlayerAnswers: { playerId: string; number: number; isRevealed: boolean }[] = [];

    answersSnap.docs.forEach((doc) => {
      const data = doc.data() as ItoPlayerAnswer;
      allPlayerAnswers.push({
        playerId: doc.id,
        number: data.number,
        isRevealed: data.isRevealed,
      });

      if (!data.isRevealed) {
        unrevealedNumbers.push(data.number);
      }
    });

    console.log('üîç Debug - All player answers:', allPlayerAnswers);
    console.log('üîç Debug - Unrevealed numbers (including selected):', unrevealedNumbers);
    console.log('üîç Debug - Selected player ID:', selectedPlayerId);
    console.log('üîç Debug - Selected number:', selectedNumber);

    // 4. ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏¢‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏à‡∏≤‡∏Å‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏õ‡∏¥‡∏î
    // ‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏≠‡∏¢‡∏π‡πà (selectedNumber) ‡∏¢‡∏±‡∏á‡∏£‡∏ß‡∏°‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô unrevealedNumbers
    // ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å mark ‡∏ß‡πà‡∏≤ isRevealed = true
    // ‡∏î‡∏±‡∏á‡∏ô‡∏±‡πâ‡∏ô‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ selectedNumber ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    const smallestNumber = Math.min(...unrevealedNumbers);
    console.log('üîç Debug - Smallest unrevealed:', smallestNumber);

    // 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ñ‡∏π‡∏Å‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    // ‡∏ñ‡∏π‡∏Å = ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡πÄ‡∏•‡πá‡∏Å‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡πÉ‡∏ô unrevealed numbers
    const isCorrect = selectedNumber === smallestNumber;
    console.log('üîç Debug - Is correct?', isCorrect);

    // 6. ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢
    let heartsLost = 0;
    if (!isCorrect) {
      // ‡∏ô‡∏±‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≤‡∏°‡πÑ‡∏õ‡∏Å‡∏µ‡πà‡∏ï‡∏±‡∏ß
      const skippedNumbers = unrevealedNumbers.filter((num) => num < selectedNumber);
      heartsLost = skippedNumbers.length;
    }

    const newHearts = Math.max(0, gameState.hearts - heartsLost);

    // 7. ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï game state
    const newRevealedNumbers = [...gameState.revealedNumbers, selectedNumber].sort(
      (a, b) => a - b
    );
    const newRound = gameState.currentRound + 1;

    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    // ‡πÄ‡∏Å‡∏°‡∏à‡∏ö‡∏ñ‡πâ‡∏≤:
    // 1. ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏´‡∏°‡∏î (‡πÅ‡∏û‡πâ)
    // 2. ‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏£‡∏ö‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏•‡πâ‡∏ß (‡∏ä‡∏ô‡∏∞ ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡∏°‡∏µ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡πÄ‡∏´‡∏•‡∏∑‡∏≠)
    // 3. ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ 1 ‡∏ï‡∏±‡∏ß (‡∏ä‡∏ô‡∏∞‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥ ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
    const allRevealed = newRevealedNumbers.length >= gameState.totalRounds;
    const onlyOneLeft = newRevealedNumbers.length === gameState.totalRounds - 1;
    const isGameFinished = allRevealed || newHearts === 0 || onlyOneLeft;

    // ‡∏Å‡∏≥‡∏´‡∏ô‡∏î status
    let newStatus: 'playing' | 'won' | 'lost' = 'playing';
    if (newHearts === 0) {
      newStatus = 'lost'; // ‡∏´‡∏±‡∏ß‡πÉ‡∏à‡∏´‡∏°‡∏î = ‡πÅ‡∏û‡πâ
    } else if (allRevealed || onlyOneLeft) {
      newStatus = 'won'; // ‡πÄ‡∏õ‡∏¥‡∏î‡∏Ñ‡∏£‡∏ö ‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏Ñ‡πà 1 ‡∏ï‡∏±‡∏ß = ‡∏ä‡∏ô‡∏∞
    }

    console.log('üîç Debug - Game status:', {
      allRevealed,
      onlyOneLeft,
      isGameFinished,
      newStatus,
      revealedCount: newRevealedNumbers.length,
      totalRounds: gameState.totalRounds,
    });

    // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏•‡∏Ç‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢ 1 ‡∏ï‡∏±‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏•‡∏Ç‡∏ô‡∏±‡πâ‡∏ô‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡∏î‡πâ‡∏ß‡∏¢
    let finalRevealedNumbers = newRevealedNumbers;
    if (onlyOneLeft && newHearts > 0) {
      // ‡∏´‡∏≤‡πÄ‡∏•‡∏Ç‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î
      const lastNumber = unrevealedNumbers.find((num) => num !== selectedNumber);
      if (lastNumber) {
        finalRevealedNumbers = [...newRevealedNumbers, lastNumber].sort((a, b) => a - b);

        // Mark ‡πÄ‡∏•‡∏Ç‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏î‡πâ‡∏ß‡∏¢
        const lastPlayerAnswer = answersSnap.docs.find(
          (doc) => doc.data().number === lastNumber
        );
        if (lastPlayerAnswer) {
          await updateDoc(lastPlayerAnswer.ref, { isRevealed: true });
        }
      }
    }

    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô reveal phase ‡∏Å‡πà‡∏≠‡∏ô
    await updateDoc(sessionRef, {
      hearts: newHearts,
      currentRound: newRound,
      revealedNumbers: finalRevealedNumbers,
      phase: 'reveal',
      status: newStatus,
      updatedAt: serverTimestamp(),
    });

    // 8. ‡∏ó‡∏≥‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏´‡∏°‡∏≤‡∏¢ player answer ‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß
    await updateDoc(answerRef, {
      isRevealed: true,
    });

    // 9. ‡∏•‡∏ö votes collection ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
    const votesRef = collection(db, `game_sessions/${sessionId}/votes`);
    const votesSnap = await getDocs(votesRef);
    const deletePromises = votesSnap.docs.map((docSnap) => deleteDoc(docSnap.ref));
    await Promise.all(deletePromises);

    console.log('‚úÖ Reveal and check completed:', {
      selectedNumber,
      smallestNumber,
      isCorrect,
      heartsLost,
      newHearts,
      allRevealed,
      newStatus,
      revealedCount: newRevealedNumbers.length,
      totalRounds: gameState.totalRounds,
    });

    return {
      success: true,
      number: selectedNumber,
      isCorrect,
      heartsLost,
      newHearts,
    };
  } catch (error) {
    console.error('‚ùå Error revealing and checking:', error);
    return null;
  }
}
