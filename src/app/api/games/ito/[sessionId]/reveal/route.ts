/**
 * API Route: Reveal ITO Game Votes
 * POST /api/games/ito/[sessionId]/reveal
 */

import { NextRequest, NextResponse } from 'next/server';
import { countVotes, revealAndCheck, startVotingPhase } from '@/lib/firebase/ito';

export async function POST(
  request: NextRequest,
  context: { params: Promise<{ sessionId: string }> }
) {
  try {
    const { sessionId } = await context.params;

    console.log('üéÆ Revealing votes for session:', sessionId);

    // 1. ‡∏ô‡∏±‡∏ö‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÇ‡∏´‡∏ß‡∏ï
    const winner = await countVotes(sessionId);

    if (!winner) {
      console.error('‚ùå No votes found');
      return NextResponse.json(
        { success: false, error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏•‡πÇ‡∏´‡∏ß‡∏ï' },
        { status: 400 }
      );
    }

    console.log('‚úÖ Vote winner:', `${winner.playerId}_${winner.answerIndex}`);

    // 2. ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏ú‡∏•‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
    console.log('üîç Calling revealAndCheck with:', {
      sessionId,
      playerId: winner.playerId,
      answerIndex: winner.answerIndex,
    });

    const result = await revealAndCheck(sessionId, winner.playerId, winner.answerIndex);

    console.log('üîç revealAndCheck result:', result);

    if (!result) {
      console.error('‚ùå revealAndCheck returned null');
      return NextResponse.json(
        { success: false, error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏ú‡∏¢‡∏ú‡∏•‡πÑ‡∏î‡πâ' },
        { status: 500 }
      );
    }

    console.log('‚úÖ Reveal result:', result);

    // 3. ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ (‡∏ù‡∏±‡πà‡∏á client ‡∏à‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô phase ‡πÄ‡∏≠‡∏á)
    return NextResponse.json(result);
  } catch (error) {
    console.error('‚ùå Error revealing votes:', error);
    console.error('‚ùå Error stack:', error instanceof Error ? error.stack : 'No stack');
    return NextResponse.json(
      {
        success: false,
        error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î',
        details: error instanceof Error ? error.message : 'Unknown error',
      },
      { status: 500 }
    );
  }
}
